import { getVoiceToTextUseCase } from "#infrastructure/bootstrap/register-usecases.js";
import { logger } from "#infrastructure/logger/index.js";
import { telegramConfig } from "#root/common/config/index.js";
import { BotContext } from "../types.js";

export async function handleVoiceMessage(ctx: BotContext): Promise<void> {
    try {
        if (!ctx.message?.voice) {
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
            return;
        }

        const userId = ctx.from?.id;

        if (!userId) {
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            return;
        }

        const file = await ctx.getFile();
        const voiceUrl = `https://api.telegram.org/file/bot${telegramConfig.token}/${file.file_path}`;

        const processingMessage = await ctx.reply("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");

        const voiceToTextUseCase = getVoiceToTextUseCase();

        const result = await voiceToTextUseCase({
            voiceUrl,
            userId: userId.toString(),
            language: "ru-RU",
        });

        if (result.success && result.data) {
            if (result.data.status === "completed" && result.data.text) {
                await ctx.api.editMessageText(
                    ctx.chatId || "",
                    processingMessage.message_id,
                    `‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n${result.data.text}`,
                );
            } else {
                await ctx.api.editMessageText(
                    ctx.chatId || "",
                    processingMessage.message_id,
                    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç: ${result.data.status}`,
                );
            }
        } else {
            await ctx.api.editMessageText(
                ctx.chatId || "",
                processingMessage.message_id,

                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${result.error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
            );
        }

        logger.info("Voice message handled", {
            userId,
            success: result.success,
        });
    } catch (error) {
        logger.error("Error handling voice message", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
    }
}
